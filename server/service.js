'use strict';


/**
 * Gets languages supported by the client generator
 *
 * no response value expected for this operation
 **/
exports.clientOptions = function() {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Returns options for a client library
 *
 * language string The target language for the client library
 * no response value expected for this operation
 **/
exports.getClientOptions = function(language) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Generates a client library
 * Accepts a `GeneratorInput` options map for spec location and generation options
 *
 * language string The target language for the client library
 * no response value expected for this operation
 **/
exports.generateClient = function(language) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Downloads a pre-generated file
 * A valid `fileId` is generated by the `/clients/{language}` or `/servers/{language}` POST operations.  The fileId code can be used just once, after which a new `fileId` will need to be requested.
 *
 * fileId string 
 * no response value expected for this operation
 **/
exports.downloadFile = function(fileId) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Gets languages supported by the server generator
 *
 * no response value expected for this operation
 **/
exports.serverOptions = function() {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Returns options for a server framework
 *
 * framework string The target language for the server framework
 * no response value expected for this operation
 **/
exports.getServerOptions = function(framework) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Generates a server library
 * Accepts a `GeneratorInput` options map for spec location and generation options.
 *
 * framework string framework
 * no response value expected for this operation
 **/
exports.generateServerForLanguage = function(framework) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}

